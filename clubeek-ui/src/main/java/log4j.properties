# This sets the global logging level and appender(s)
# To specify more appenders: log4j.rootLogger=level, appender1, appender2, ...
log4j.rootLogger=DEBUG, consoleAppender

# Settings for the console appender
log4j.appender.consoleAppender=org.apache.log4j.ConsoleAppender
# Pattern layout is a flexible layout configurable with pattern string.
log4j.appender.consoleAppender.layout=org.apache.log4j.PatternLayout
# The format of the result depends on the conversion pattern.
# Each conversion specifier starts with a percent sign (%) and is followed by optional format modifiers and conversion character.
# The format modifiers control such things as field width, padding, left and right justification.
# The conversion character specifies the type of data, e.g. category, priority, date, thread name.
#	d -   Outputs the date of the logging event.
#	t -   Outputs the name of the thread that generated the logging event.
#	p -   Outputs the level of the logging event.
#	c -   Outputs the name of the logger that published the logging event.
#	x -   Outputs the Thread Context Stack (also known as the Nested Diagnostic Context or NDC) associated with the thread that generated the logging event.
#	m -   Outputs the application supplied message associated with the logging event.
#	%-5p -Means that the priority of the logging event should be left justified to a width of five characters.
#	%n -  Print new line.
log4j.appender.consoleAppender.layout.ConversionPattern=%d{HH:mm:ss:SSS} [%t] %-5p %c %x - %m%n




# ==============
# Usage
# ==============
# Generally speaking logger is usually static but in Vaadin book is recommended to do not use static variable.
# private Logger logger = LoggerFactory.getLogger(HorzMenuGUI.class);
#
# logger.error("error message");
# logger.warn("warn message");
# logger.info("info message");
# logger.debug("debug message");

# ==============
# Logging levers
# ==============
# ERROR:	Something terribly wrong had happened. Any error/exception that is or might be critical.
# WARN:		The process might be continued, but take extra caution. Any message that might warn us of potential problems, e.g. when a user tried to log in with wrong credentials which might indicate an attack.
# INFO: 	Important business process has finished. In ideal world, administrator or advanced user should be able to understand INFO messages and quickly find out what the application is doing. Anything that we want to know when looking at the log files, e.g. when a scheduled job started/ended.
# DEBUG: 	Debug messages, developers stuff.
# http://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html